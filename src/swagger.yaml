openapi: 3.0.3
info:
  title: Service Management API
  description: A RESTful API for managing users, branches, categories, services, and orders in a service-oriented system.
  version: 1.0.0
  contact:
    name: API Support
    email: support@example.com
servers:
  - url: http://localhost:5000
    description: Local development server
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      required:
        - lastName
        - firstName
        - middleName
        - email
        - password
        - role
      properties:
        _id:
          type: string
          example: 60d0fe4f5311236168a109ca
        lastName:
          type: string
          example: Doe
        firstName:
          type: string
          example: John
        middleName:
          type: string
          example: Smith
        email:
          type: string
          example: john.doe@example.com
        password:
          type: string
          example: Password123!
        role:
          type: string
          enum: [user, manager, admin]
          example: user
        branch:
          type: string
          example: 60d0fe4f5311236168a109cb
        visitsCount:
          type: integer
          example: 5
        createdAt:
          type: string
          format: date-time
          example: 2025-09-08T00:41:00.000Z
        updatedAt:
          type: string
          format: date-time
          example: 2025-09-08T00:41:00.000Z
    Branch:
      type: object
      required:
        - name
        - address
      properties:
        _id:
          type: string
          example: 60d0fe4f5311236168a109cb
        name:
          type: string
          example: Downtown Branch
        address:
          type: string
          example: 123 Main St, City
        createdAt:
          type: string
          format: date-time
          example: 2025-09-08T00:41:00.000Z
        updatedAt:
          type: string
          format: date-time
          example: 2025-09-08T00:41:00.000Z
    Category:
      type: object
      required:
        - name
      properties:
        _id:
          type: string
          example: 60d0fe4f5311236168a109cc
        name:
          type: string
          example: Cleaning
        createdAt:
          type: string
          format: date-time
          example: 2025-09-08T00:41:00.000Z
        updatedAt:
          type: string
          format: date-time
          example: 2025-09-08T00:41:00.000Z
    Service:
      type: object
      required:
        - name
        - price
        - category
      properties:
        _id:
          type: string
          example: 60d0fe4f5311236168a109cd
        name:
          type: string
          example: Standard Cleaning
        price:
          type: number
          example: 50.00
        category:
          type: string
          example: 60d0fe4f5311236168a109cc
        difficulty:
          type: string
          enum: [simple, medium, complex]
          example: simple
        createdAt:
          type: string
          format: date-time
          example: 2025-09-08T00:41:00.000Z
        updatedAt:
          type: string
          format: date-time
          example: 2025-09-08T00:41:00.000Z
    Order:
      type: object
      required:
        - user
        - service
        - branch
      properties:
        _id:
          type: string
          example: 60d0fe4f5311236168a109ce
        user:
          type: string
          example: 60d0fe4f5311236168a109ca
        service:
          type: string
          example: 60d0fe4f5311236168a109cd
        branch:
          type: string
          example: 60d0fe4f5311236168a109cb
        dateIn:
          type: string
          format: date-time
          example: 2025-09-08T00:41:00.000Z
        pickupDate:
          type: string
          format: date-time
          example: 2025-09-09T00:41:00.000Z
        totalPrice:
          type: number
          example: 60.00
        status:
          type: string
          enum: [received, in_progress, done, picked_up]
          example: received
        urgency:
          type: string
          enum: [day, week, month]
          example: month
        createdAt:
          type: string
          format: date-time
          example: 2025-09-08T00:41:00.000Z
        updatedAt:
          type: string
          format: date-time
          example: 2025-09-08T00:41:00.000Z
    Error:
      type: object
      properties:
        message:
          type: string
          example: Server error
        error:
          type: string
          example: Something went wrong
    PaginatedResponse:
      type: object
      properties:
        data:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/User'
              - $ref: '#/components/schemas/Branch'
              - $ref: '#/components/schemas/Category'
              - $ref: '#/components/schemas/Service'
              - $ref: '#/components/schemas/Order'
        total:
          type: integer
          example: 100
        page:
          type: integer
          example: 1
        totalPages:
          type: integer
          example: 10
paths:
  /auth/login:
    post:
      summary: Log in a user (managers or admins only)
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  example: john.doe@example.com
                password:
                  type: string
                  example: Password123!
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        '400':
          description: Invalid credentials or access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /branches:
    get:
      summary: Get all branches with pagination
      tags:
        - Branches
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: List of branches
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create a new branch
      tags:
        - Branches
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - address
              properties:
                name:
                  type: string
                  example: Downtown Branch
                address:
                  type: string
                  example: 123 Main St, City
      responses:
        '201':
          description: Branch created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Branch'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized (admin access required)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /branches/{id}:
    get:
      summary: Get a branch by ID
      tags:
        - Branches
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Branch details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Branch'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Branch not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update a branch
      tags:
        - Branches
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Downtown Branch
                address:
                  type: string
                  example: 123 Main St, City
      responses:
        '200':
          description: Branch updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Branch'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized (admin access required)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Branch not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete a branch
      tags:
        - Branches
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Branch deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Branch deleted successfully
        '401':
          description: Unauthorized (admin access required)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Branch not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /categories:
    get:
      summary: Get all categories with pagination
      tags:
        - Categories
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: List of categories
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create a new category
      tags:
        - Categories
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  example: Cleaning
      responses:
        '201':
          description: Category created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /categories/{id}:
    get:
      summary: Get a category by ID
      tags:
        - Categories
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Category details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update a category
      tags:
        - Categories
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Cleaning
      responses:
        '200':
          description: Category updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete a category
      tags:
        - Categories
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Category deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Category deleted successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /services:
    get:
      summary: Get all services with pagination and optional sorting/filtering
      tags:
        - Services
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
        - name: sortPrice
          in: query
          schema:
            type: string
            enum: [asc, desc]
        - name: category
          in: query
          schema:
            type: string
      responses:
        '200':
          description: List of services
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create a new service
      tags:
        - Services
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - price
                - category
              properties:
                name:
                  type: string
                  example: Standard Cleaning
                price:
                  type: number
                  example: 50.00
                category:
                  type: string
                  example: 60d0fe4f5311236168a109cc
                difficulty:
                  type: string
                  enum: [simple, medium, complex]
                  example: simple
      responses:
        '201':
          description: Service created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized (admin access required)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /services/{id}:
    get:
      summary: Get a service by ID
      tags:
        - Services
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Service details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Service not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update a service
      tags:
        - Services
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Standard Cleaning
                price:
                  type: number
                  example: 50.00
                category:
                  type: string
                  example: 60d0fe4f5311236168a109cc
                difficulty:
                  type: string
                  enum: [simple, medium, complex]
                  example: simple
      responses:
        '200':
          description: Service updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized (admin access required)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Service not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete a service
      tags:
        - Services
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Service deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Service deleted successfully
        '401':
          description: Unauthorized (admin access required)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Service not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /orders:
    get:
      summary: Get all orders with pagination and filtering
      tags:
        - Orders
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
        - name: status
          in: query
          schema:
            type: string
            enum: [received, in_progress, done, picked_up]
        - name: branch
          in: query
          schema:
            type: string
      responses:
        '200':
          description: List of orders
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create a new order
      tags:
        - Orders
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - service
                - branch
              properties:
                user:
                  type: string
                  example: 60d0fe4f5311236168a109ca
                service:
                  type: string
                  example: 60d0fe4f5311236168a109cd
                branch:
                  type: string
                  example: 60d0fe4f5311236168a109cb
                urgency:
                  type: string
                  enum: [day, week, month]
                  example: month
      responses:
        '201':
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /orders/total:
    get:
      summary: Get the total number of orders
      tags:
        - Orders
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Total number of orders
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalOrders:
                    type: integer
                    example: 150
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /orders/branch/{branchId}/stats:
    get:
      summary: Get order statistics for a specific branch
      tags:
        - Orders
      security:
        - BearerAuth: []
      parameters:
        - name: branchId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Order statistics for the branch
          content:
            application/json:
              schema:
                type: object
                properties:
                  branchId:
                    type: string
                    example: 60d0fe4f5311236168a109cb
                  branchName:
                    type: string
                    example: Downtown Branch
                  count:
                    type: integer
                    example: 50
        '400':
          description: Invalid branch ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /orders/{id}:
    get:
      summary: Get an order by ID
      tags:
        - Orders
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Order details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update order status
      tags:
        - Orders
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - status
              properties:
                status:
                  type: string
                  enum: [received, in_progress, done, picked_up]
                  example: done
      responses:
        '200':
          description: Order status updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete an order
      tags:
        - Orders
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Order deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Order deleted successfully
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /orders/{id}/pickup:
    put:
      summary: Mark an order as picked up
      tags:
        - Orders
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Order marked as picked up
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Order marked as picked up
                  order:
                    $ref: '#/components/schemas/Order'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users:
    get:
      summary: Get all users with pagination
      tags:
        - Users
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create a new user
      tags:
        - Users
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - lastName
                - firstName
                - middleName
                - email
                - password
                - role
              properties:
                lastName:
                  type: string
                  example: Doe
                firstName:
                  type: string
                  example: John
                middleName:
                  type: string
                  example: Smith
                email:
                  type: string
                  example: john.doe@example.com
                password:
                  type: string
                  example: Password123!
                role:
                  type: string
                  enum: [user, manager, admin]
                  example: user
                branch:
                  type: string
                  example: 60d0fe4f5311236168a109cb
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/{id}:
    get:
      summary: Get a user by ID
      tags:
        - Users
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update a user
      tags:
        - Users
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                lastName:
                  type: string
                  example: Doe
                firstName:
                  type: string
                  example: John
                middleName:
                  type: string
                  example: Smith
                email:
                  type: string
                  example: john.doe@example.com
                password:
                  type: string
                  example: Password123!
                role:
                  type: string
                  enum: [user, manager, admin]
                  example: user
                branch:
                  type: string
                  example: 60d0fe4f5311236168a109cb
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete a user
      tags:
        - Users
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User deleted successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'